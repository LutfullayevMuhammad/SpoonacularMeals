package uz.lutfullayevmuhammad.lesson63.ui.detailsimport android.annotation.SuppressLintimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.core.content.ContextCompatimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport androidx.navigation.fragment.navArgsimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.LinearLayoutManagerimport coil.loadimport dagger.android.support.DaggerFragmentimport uz.lutfullayevmuhammad.lesson63.Rimport uz.lutfullayevmuhammad.lesson63.core.adapter.ingredients.grid.IngredientsGrisAdapterimport uz.lutfullayevmuhammad.lesson63.core.adapter.ingredients.list.IngredientsListAdapterimport uz.lutfullayevmuhammad.lesson63.core.helper.ViewModelProviderFactoryimport uz.lutfullayevmuhammad.lesson63.databinding.FragmentDetailsBindingimport javax.inject.Injectclass DetailsFragment : DaggerFragment() {    private val binding by lazy {        FragmentDetailsBinding.inflate(layoutInflater)    }    private val args: DetailsFragmentArgs by navArgs()    private var adapterList = IngredientsListAdapter()    private var adapterGrid = IngredientsGrisAdapter()    var listStyle = false    @Inject    lateinit var vmProviderFactory: ViewModelProviderFactory    private val viewModel: DetailsViewModel by viewModels { vmProviderFactory }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        return binding.root    }    @SuppressLint("ResourceAsColor")    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        binding.ingredientsListStyle.setOnClickListener {            if (listStyle == true) {                binding.ingredientsList.adapter = adapterList                binding.ingredientsList.layoutManager =                    LinearLayoutManager(requireContext(), LinearLayoutManager.VERTICAL, false)                binding.ingredientList.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyleBtn))                binding.ingredientGrid.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyle))                listStyle = false            }else if (listStyle == false){                binding.ingredientsList.adapter = adapterGrid                binding.ingredientsList.layoutManager =                    GridLayoutManager(requireContext(),3)                binding.ingredientGrid.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyleBtn))                binding.ingredientList.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyle))                listStyle = true            }        }        if (listStyle == true) {            binding.ingredientsList.adapter = adapterList            binding.ingredientsList.layoutManager =                LinearLayoutManager(requireContext(), LinearLayoutManager.VERTICAL, false)            binding.ingredientList.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyleBtn))            binding.ingredientGrid.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyle))            listStyle = false        }else if (listStyle == false){            binding.ingredientsList.adapter = adapterGrid            binding.ingredientsList.layoutManager =                GridLayoutManager(requireContext(),3)            binding.ingredientGrid.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyleBtn))            binding.ingredientList.setBackgroundColor(context?.resources!!.getColor(R.color.ingListStyle))            listStyle = true        }        viewModel.detailsMeal(args.id)        viewModel.detailsLiveData.observe(viewLifecycleOwner) { detail ->            //data            adapterList.data = detail.extendedIngredients            adapterGrid.data = detail.extendedIngredients            //mealImage            binding.mealImage.load(detail.image)            //mealTitle            binding.mealName.text = detail.title            //dishType//            if (binding.mealType.text == "") {//                binding.mealType.text = buildString {//                    for (i in 0 until detail.dishTypes.size - 1) {//                        append("${detail.dishTypes[i]}, ")//                    }//                    append(detail.dishTypes[detail.dishTypes.size - 1])//                }//            }            //summary            binding.summary.text = detail.summary        }        binding.backButton.setOnClickListener {            findNavController().popBackStack()        }        viewModel.errorLiveData.observe(viewLifecycleOwner) {            Toast.makeText(requireContext(), it?.message, Toast.LENGTH_SHORT).show()        }        viewModel.networkErrorLiveData.observe(viewLifecycleOwner) {            Toast.makeText(requireContext(), "networkErrorLiveData", Toast.LENGTH_SHORT).show()        }    }    override fun onResume() {        super.onResume()    }}