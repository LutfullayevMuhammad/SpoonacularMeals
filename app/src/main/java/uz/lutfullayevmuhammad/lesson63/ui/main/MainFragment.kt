package uz.lutfullayevmuhammad.lesson63.ui.mainimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.core.widget.addTextChangedListenerimport androidx.fragment.app.FragmentContainerimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.FragmentNavigatorDestinationBuilderimport androidx.navigation.fragment.FragmentNavigatorExtrasimport androidx.navigation.fragment.findNavControllerimport androidx.recyclerview.widget.GridLayoutManagerimport dagger.android.support.DaggerFragmentimport uz.lutfullayevmuhammad.lesson63.core.adapter.search.SearchMealsAdapterimport uz.lutfullayevmuhammad.lesson63.core.di.ui.main.MainFragmentProvidersimport uz.lutfullayevmuhammad.lesson63.core.di.ui.main.mainFragment.MainFragmentModuleimport uz.lutfullayevmuhammad.lesson63.core.helper.ViewModelProviderFactoryimport uz.lutfullayevmuhammad.lesson63.databinding.FragmentHomeBindingimport uz.lutfullayevmuhammad.lesson63.ui.MainActivityimport javax.inject.Injectclass MainFragment : DaggerFragment() {    val binding by lazy {        FragmentHomeBinding.inflate(layoutInflater)    }    private var adapter = SearchMealsAdapter()    private var searchedText = ""    @Inject    lateinit var vmProviderFactory: ViewModelProviderFactory    private val viewModel: MainViewModel by viewModels { vmProviderFactory }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        binding.searchList.adapter = adapter        binding.searchList.layoutManager =            GridLayoutManager(requireContext(),2)        binding.searchText.addTextChangedListener {            it?.let {                viewModel.searchMeal(it.toString())            }        }        viewModel.searchLiveData.observe(viewLifecycleOwner) {            adapter.data = it        }        viewModel.errorLiveData.observe(viewLifecycleOwner){            Toast.makeText(requireContext(), it?.message, Toast.LENGTH_SHORT).show()        }        viewModel.networkErrorLiveData.observe(viewLifecycleOwner){            Toast.makeText(requireContext(), "networkErrorLiveData", Toast.LENGTH_SHORT).show()        }        adapter.onItemClick = {            val action = MainFragmentDirections.actionMainFragmentToDetailsFragment2(it.id.toString())            findNavController().navigate(action)        }    }    override fun onResume() {        super.onResume()    }}